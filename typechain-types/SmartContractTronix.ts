/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace SmartContractTronix {
  export type ItemStruct = {
    id: BigNumberish;
    name: string;
    description: string;
  };

  export type ItemStructOutput = [
    id: bigint,
    name: string,
    description: string
  ] & { id: bigint; name: string; description: string };
}

export interface SmartContractTronixInterface extends Interface {
  getFunction(
    nameOrSignature: "createItem" | "readItem" | "updateItem"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "ItemCreated" | "ItemUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "createItem",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "readItem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateItem",
    values: [BigNumberish, string, string]
  ): string;

  decodeFunctionResult(functionFragment: "createItem", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "readItem", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "updateItem", data: BytesLike): Result;
}

export namespace ItemCreatedEvent {
  export type InputTuple = [
    id: BigNumberish,
    name: string,
    description: string
  ];
  export type OutputTuple = [id: bigint, name: string, description: string];
  export interface OutputObject {
    id: bigint;
    name: string;
    description: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ItemUpdatedEvent {
  export type InputTuple = [
    id: BigNumberish,
    name: string,
    description: string
  ];
  export type OutputTuple = [id: bigint, name: string, description: string];
  export interface OutputObject {
    id: bigint;
    name: string;
    description: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SmartContractTronix extends BaseContract {
  connect(runner?: ContractRunner | null): SmartContractTronix;
  waitForDeployment(): Promise<this>;

  interface: SmartContractTronixInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createItem: TypedContractMethod<
    [_name: string, _description: string],
    [void],
    "nonpayable"
  >;

  readItem: TypedContractMethod<
    [_id: BigNumberish],
    [SmartContractTronix.ItemStructOutput],
    "view"
  >;

  updateItem: TypedContractMethod<
    [_id: BigNumberish, _name: string, _description: string],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createItem"
  ): TypedContractMethod<
    [_name: string, _description: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "readItem"
  ): TypedContractMethod<
    [_id: BigNumberish],
    [SmartContractTronix.ItemStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "updateItem"
  ): TypedContractMethod<
    [_id: BigNumberish, _name: string, _description: string],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "ItemCreated"
  ): TypedContractEvent<
    ItemCreatedEvent.InputTuple,
    ItemCreatedEvent.OutputTuple,
    ItemCreatedEvent.OutputObject
  >;
  getEvent(
    key: "ItemUpdated"
  ): TypedContractEvent<
    ItemUpdatedEvent.InputTuple,
    ItemUpdatedEvent.OutputTuple,
    ItemUpdatedEvent.OutputObject
  >;

  filters: {
    "ItemCreated(uint256,string,string)": TypedContractEvent<
      ItemCreatedEvent.InputTuple,
      ItemCreatedEvent.OutputTuple,
      ItemCreatedEvent.OutputObject
    >;
    ItemCreated: TypedContractEvent<
      ItemCreatedEvent.InputTuple,
      ItemCreatedEvent.OutputTuple,
      ItemCreatedEvent.OutputObject
    >;

    "ItemUpdated(uint256,string,string)": TypedContractEvent<
      ItemUpdatedEvent.InputTuple,
      ItemUpdatedEvent.OutputTuple,
      ItemUpdatedEvent.OutputObject
    >;
    ItemUpdated: TypedContractEvent<
      ItemUpdatedEvent.InputTuple,
      ItemUpdatedEvent.OutputTuple,
      ItemUpdatedEvent.OutputObject
    >;
  };
}
